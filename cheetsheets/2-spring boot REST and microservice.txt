
===========
Day 2:
===========
Spring boot exception handling
validation
spring boot profiles
spring boot reading property files
spring boot logging
actuator: used to monitor application

app1 ------------------------- app2
			?
	syn: resttemplate, openfeign
	as syn: messaging
			rabbitmq, kafka
			
communication bw spring boot application
	resttemplate
	openfeign
	
monolith vs microservice

microservice design pattern
	arch patterns using which we can create modern distributed app
	tools, introduce those
	
bank application microservice project


Step 5: exception handing
-----------------------------
404
---
{
    "timestamp": "2024-08-08T04:14:16.597+00:00",
    "status": 500,
    "error": "Internal Server Error",
    "tocontact": "raj@ora.com"
}

Step 6: using validation api
--------------------------------

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Account {

	private int id;
	
	@NotNull(message = "{account.name.absent}")
	@Pattern(regexp = "[A-Za-z]+( [A-Za-z]+)*", message = "{account.name.invalid}")
	private String name;
	
	@NotNull(message = "{account.balance.absent}")
	@Range(min = 100, max = 100000, message = "{account.balance.invalid}")
	private BigDecimal balance;

	@Email(message = "{account.email.invalid}")
	@NotNull(message = "{account.email.absent}")
	private String email;
	
	@NotNull(message = "{account.phone.absent}")
	@Pattern(regexp = "[789][0-9]{9}", message = "{account.phone.invalid}")
	private String phone;
	
	public AccountDto(String name, BigDecimal balance, String email, String phone) {
		this.name = name;
		this.balance = balance;
		this.email = email;
		this.phone = phone;
	}
}

MethodArgumentNotValidException

ValidationMessages.properties
-------------------------------
account.email.absent=Please provide email address
account.email.invalid=Please provide valid email address

account.name.absent=Please provide customer name
account.name.invalid=Name should contain only alphabets and space

account.phone.absent=Please provide phone 
account.phone.invalid=Please provide correct phone number of 10 digits

account.balance.absent=Please provide initial balance 
account.balance.invalid=Please provide correct initial balance bw 100 to 100000


@RestControllerAdvice
public class AccountExceptionRestController {

	@Autowired
	private Environment environment;

	// ---------handling 404 error------
	@ExceptionHandler(AccountNotFoundException.class)
	public ResponseEntity<ErrorInfo> handleAccountNotFound(AccountNotFoundException accountNotFoundException) {
		ErrorInfo errorInfo = new ErrorInfo().builder().dateTime(LocalDateTime.now()).toContact("masterbank@bank.com")
				.errorCode(404).errorMessage(environment.getProperty(accountNotFoundException.getMessage())).build();
		return ResponseEntity.status(HttpStatus.NOT_FOUND).body(errorInfo);
	}

	// ---------handling 500 error------
	@ExceptionHandler(Exception.class)
	public ResponseEntity<ErrorInfo> handle500(Exception exception) {
		ErrorInfo errorInfo = new ErrorInfo().builder().dateTime(LocalDateTime.now()).toContact("masterbank@bank.com")
				.errorCode(500).errorMessage(environment.getProperty(exception.getMessage())).build();
		return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorInfo);
	}

	@ResponseStatus(HttpStatus.BAD_REQUEST)
	@ExceptionHandler(MethodArgumentNotValidException.class)
	public Map<String, String> handleInvalidArgument(MethodArgumentNotValidException ex) {

		Map<String, String> errorMap = new HashMap<>();
		ex.getBindingResult().getFieldErrors().forEach(error -> {
			errorMap.put(error.getField(), error.getDefaultMessage());
		});
		return errorMap;
	}
}





Step 7: spring boot reading property files, spring boot profile
---------------------------------
1. @Value annotation
2. Enviornment
3. @ConfigrationProperties


@EnableConfigurationProperties(Config.class)
@ConfigurationProperties(prefix = "msg")



how to run spring boot application as a jar file:
java -jar bankapp.jar --spring.profiles.active=dev

java -jar --spring.profiles.active=dev  bankapp.jar --server.port=9090( check this)

welblogic web server
tomcat web server: war spring boot
jar: on embedded tomcat --> docker -> k8s
war file:




Step 8: spring boot logging
---------------------------------
# if u want to disable logging
#logging.level.root=OFF
#logging.level.org.springframework.boot=OFF
#spring.main.banner-mode=OFF


logging.level.org.springframework.web: DEBUG
logging.level.org.hibernate: ERROR
logging.level.com.productapp: INFO
logging.level.com.productapp.service: INFO

logging.pattern.console= "%d{yyyy-MM-dd } [%thread] %-5level %logger{36} - %msg%n"
#logging pattern for file
logging.pattern.file= "%d{yyyy-MM-dd } [%thread] %-5level %logger{36} - %msg%n"
#i wnat to send logs to a specific file?


Step 9: spring boot actuator
--------------------------

spring.jmx.enabled=true
management.endpoints.jmx.exposure.include=*


management.endpoints.web.exposure.include=*
management.info.env.enabled=true

info.key=default
spring.profiles.active=test


management.endpoint.health.show-details=always

management.endpoint.health.probes.enabled=true
# livenessstate readinessstate
#management.health.livenessstate.enabled=true
#management.health.readinessstate.enabled=true

spring.jmx.enabled=true
management.endpoints.web.exposure.include=*
management.endpoints.jmx.exposure.include=*

management.info.env.enabled=true
info.app.encoding=UTF-8
info.app.java.source=21
info.app.java.target=21
info.app.name=productapp
info.app.dev=amit ku

management.endpoint.health.show-details=always
management.endpoint.health.probes.enabled=true
# livenessstate readinessstate
#management.health.livenessstate.enabled=true
#management.health.readinessstate.enabled=true


How 2 spring boot application intract with each other?
---------------------------------------------------------


microservice:























UserInterface.TRANSFER_SUCCESS=transfer done successfully
UserInterface.DEPOSIT_SUCCESS=amount deposit successfully
UserInterface.WITHDRAW_SUCCESS=amount withdraw successfully
Service.ACCOUNT_NOT_EXISTS=Account not exist
Service.FROM_ACCOUNT_NOT_EXISTS=From Account not exist

Service.TO_ACCOUNT_NOT_EXISTS=To Account not exist

Service.NOT_SUFFICIENT_BALANCE=Account dont have sufficient balance




spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=foo
spring.datasource.password=foo
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

spring.h2.console.enabled=true

# Custom H2 Console URL
spring.h2.console.path=/h2

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true 



