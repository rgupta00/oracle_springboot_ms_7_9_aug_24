Overview of Micro Services architecture Springboot features Kafka (1)
================================================================

Trainer intro:
Rajeev gupta
https://www.linkedin.com/in/rajeevguptajavatrainer/


Stream processing*

https://www.youtube.com/playlist?list=PLv2-IhRmhbySgIQo3rH8KnclTSOYAp2xG


Tools:
-----------
java 17
sts 4.x (is modified eclipse)
maven as build tools
docker desktop
kafka
postman
database: h2 (in memory database)




Day -1

    Getting started with Spring Boot
    Building RESTFul Microservices using Spring MVC
    Interacting with database using Spring Data
	
Day -2

	Introduction to Microservices Architecture
    Apply 12 Factor methodology in Microservices using Spring Cloud

Day -3

    Introduction to Publish Subscribe Messaging
    Implementing Asynchronous Communication using Kafka
    Introduction to Containerization
    Building Docker Images for Microservices


Bankapplication applicatation
---------------------------
* Spring vs Spring boot, Spring boot introduction 
* Spring DI Qucick recap
* AOP how to handle cross cutting concerns
* Spring boot rest
* spring boot data jpa
* Excpetion handling
* Validation
* Actuator
* logging
* Security


Advantage of spring boot , configuration spring boot
---------------------------------------------------

	=> Auto-Configuration 

	=> Dependency Management

	=> Externalized Configuration
		bean can be configured through application.properties file 
		without touching java or xml config

	=> Production support
		We get health checking, application and jvm metrics, 
		jmx via http and a few more things for free

	=> Runnable Jars
		 We can package your application as a runnable jar with embedded tomcat
		 included so it presents a self-contained deployment unit

	=> Microservice


Getting started with spring boot:
--------------------------------

bank application 3 tier: MVC

controller layer -------------------- service layer ------------------- dao layer --------------db
																	repository layer
																	
Step 1: understading why we need DI?
------------------------------------

Dao layer:
--------------															
public class Account {
    private int id;
    private String name;
    private double balance;
}
	
public interface AccountDao {
	public List<Account> getAll();
	public Account getById(int id);
	public void updateAccount(Account account);
	public void addAccount(Account account);
	public void deleteAccount(int id);
}


public class AccountDaoCollectionImpl implements AccountDao{
	private Map<Integer, Account> accounts=new HashMap<>();
	
	public AccountDaoCollectionImpl() {
		accounts.put(1, new Account(1, "raj", 560000.00));
		accounts.put(2, new Account(2, "ekta", 760000.00));
	}
	@Override
	public List<Account> getAll() {
		System.out.println("getAll using hard coded collection...");
		return new ArrayList<Account>(accounts.values());
	}

	@Override
	public Account getById(int id) {
		return accounts.get(id);
	}

	@Override
	public void updateAccount(Account account) {
		accounts.put(account.getId(), account);
	}

}

Service layer:
-----------------
public interface AccountService {
    public List<Account> getAll();
    public Account getById(int id);
	
    public void addAccount(Account account);
    public void deleteAccount(int id);

    public void transfer(int fromAccId, int toAccId, BigDecimal amount);
    public void deposit(int accId, BigDecimal amount);
    public void withdraw(int accId, BigDecimal amount);
}


Understanding web services, understading RESTFul

http protocol

Successful responses (200 – 299)
	200
	201
	204
Redirection messages (300 – 399)
   300
Client error responses (400 – 499)
	404
	401
	403
	
Server error responses (500 – 599)
	500
	

1. Created spring boot application for bank app
* get all accounts
* get by id
*transfer
* deposit
* withdraw
problem : no validation, no proper exception handing *
		not using database
		

Step 4: i want to use database:
-----------------------------------
JPA/hibernate?
